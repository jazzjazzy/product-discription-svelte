# We are not using prisma migration because it is not supported by PlanetScale
# We are using PlanetScale CLI to create a deploy request and deploy it

name: Update PlanetScale Database

on:
  push:
    branches:
      - main

jobs:
  update-database:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install PlanetScale CLI
        run: curl -LO https://github.com/planetscale/cli/releases/download/v0.178.0/pscale_0.178.0_linux_amd64.deb && sudo dpkg -i pscale_0.178.0_linux_amd64.deb && rm pscale_0.178.0_linux_amd64.deb

      - name: Authenticate with PlanetScale
        run: |
         echo ${{ secrets.PLANETSCALE_SERVICE_TOKEN }} | pscale auth login --service-token ${{ secrets.PLANETSCALE_SERVICE_TOKEN }} --service-token-id ${{ secrets.PLANETSCALE_TOKEN_ID}} --service-token-stdin

      - name: Create Deploy Request
        id: create-deploy-request
        run: |
          output=$(pscale deploy-request create dis-scription development main --format json)
          echo "DeployRequestOutput=$output" >> $GITHUB_ENV
          deploy_request_number=$(echo $output | jq -r '.number')
          echo ::set-output name=deploy_request_number::$deploy_request_number

      - name: Deploy Request
        run: pscale deploy-request deploy dis-scription ${{ steps.create-deploy-request.outputs.deploy_request_number }}
        env:
          PLANETSCALE_ORG: your-planetscale-org-name # Set your PlanetScale organization name here
