/// This is your Prisma schema file,
/// learn more about it in the docs: https:///pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                       String                     @id @unique
  firstname                String
  surname                  String
  email                    String                     @unique
  role                     userRoles                  @default(USER)
  email_verified           Boolean                    @default(false)
  stripe_customer_id       String?
  auth_session             Session[]
  key                      Key[]
  subscription             Subscription[]             
  DescriptionHistory       DescriptionHistory[]      
  password_reset_token     password_reset_token[]
  email_verification_token email_verification_token[]
  shop_description         shop_description[]
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @updatedAt
  deleted_at               DateTime?
}

model email_verification_token {
  id         String   @id @default(uuid())
  expires    BigInt
  user_id    String
  user       User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

model password_reset_token {
  id         String   @id @default(uuid())
  expires    BigInt
  user_id    String
  user       User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

enum userRoles {
  USER
  ADMIN
  GOD
}

model Session {
  id             String    @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  // extra attributes to session
  name           String?
  role           userRoles
  subscribed     Boolean   @default(false)
  plan           String?
  user           User      @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Pricing {
  id              String         @id @default(uuid())
  name            String
  price           Float
  description     String?        @db.Text
  list            String         @db.Text
  stripe_price_id String
  visable         Boolean        @default(true)
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  deleted_at      DateTime?
  subscription    Subscription[]

  @@index([stripe_price_id])
}

model Subscription {
  id                     String    @id @default(uuid())
  type                   String
  user_id                String
  price_id               String
  stripe_subscription_id String
  stripe_status          String
  stripe_price_id        String
  stripe_customer_id     String    @unique
  trial_end_date         DateTime?
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt
  deleted_at             DateTime?
  User                   User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Pricing                Pricing   @relation(fields: [price_id], references: [id])

  @@index([user_id])
  @@index([price_id])
}

model DescriptionHistory {
  id                    String    @id @default(uuid())
  user_id               String?
  store_type            String /// type of store the user selected, etsy, shopify woocommerce etc
  image_location        String    @db.Text ///location of the image either external url or local file
  image_type            String ///how we got the image, either from a url or from a file base64
  image_description     String    @db.Text ///discription of the image genterated by the chatGPT vision api
  shop_description      String    @db.Text ///users input about their shop
  product_description   String    @db.Text ///users input  about their product
  charactor_size        Int? ///amount chars user resquested to generate a description
  temperature           Float ///selected temprature for the gpt model
  generated_title       String    @db.TinyText ///title generated by the chatGPT model
  generated_description String    @db.Text ///description generated by the chatGPT model
  generated_keywords    String    @db.Text ///keywords generated by the chatGPT model 
  count_title           Int ///amount of chars in the generated title
  count_description     Int ///amount of chars in the generated description
  generated_json        Json      @db.Json ///json object of the generated description
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  deleted_at            DateTime?
  User                  User?     @relation(fields: [user_id], references: [id])
}

model shop_description {
  id          String    @id @default(uuid())
  user_id     String?
  title       String    @db.TinyText ///title of the shop discription
  description String    @db.Text ///the recorded description
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
  user        User?     @relation(fields: [user_id], references: [id])
}
